

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.function.Consumer;

public class Names {

	ArrayList<String> names = new ArrayList<>();

	public static void main(String[] args) {
			
		
		 

	}

	public void searchNameBetterWay() {

		System.out.println("Found Rajesh?:" + names.contains("Rajesh"));
	}

	public void searchName() {
		boolean found = false;

		names.add("Sandesh");
		names.add("Rajesh");
		names.add("Akhilesh");

		for (String name : names) {
			if (name.equals("Rajesh")) {
				found = true;
				break;
			}
		}
		System.out.println("Found Rajesh?:" + found);
	}

	// lesson 2
	// We changed just one thing: we traded in the old for loop for the new
	// internal iterator forEach(). As for the benefit, we went from telling it
	// how to iterate to focusing on what we want to do for each element
	public void forEach() {
		names.forEach(new Consumer<String>() {
			public void accept(final String name) {
				System.out.println(name);
			}
		});
	}

	// The forEach() is a higher-order function that accepts a lambda expression
	// or block of code to execute in the context of each element in the list.
	// The variable name is bound to each element of the collection during the
	// call. The underlying library takes control of how the lambda expressions
	// are evaluated.
	public void forEach2() {
		names.forEach((final String name) -> System.out.println(name));
	}

	// The map() method is quite useful to map or transform an input collection
	// into a new output collection.
	public void forEach3() {
		names.stream().map(name -> name.toUpperCase()).forEach(name -> System.out.print(name + " "));
		System.out.println();
	}

	public void forEach4() {
		names.stream().map(String::toUpperCase).forEach(name -> System.out.println(name));
	}
}
